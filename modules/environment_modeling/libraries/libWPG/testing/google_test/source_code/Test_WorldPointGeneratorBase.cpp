////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file Test_WorldPointGeneratorBase.cpp
///
/// \brief Source file containing the unit tests for WorldPointGeneratorBase.
////////////////////////////////////////////////////////////////////////////////////////////////////

/*
This file is part of the Robotics Toolbox.

Copyright (C) 2024

Authors: Bernd Kitt (b.kitt@berndkitt.de)

The Robotics Toolbox is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 3 of the License,
or any later version.

The Robotics Toolbox is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along with
the Robotics Toolbox. If not, see https://www.gnu.org/licenses/.
*/

#include <gtest/gtest.h>

#include "../../../source_code/include/WorldPointGeneratorBase.h"

// definition of macros for the unit tests
#define TEST_COPYASSIGNMENTOPERATOR_SELFASSIGNMENT TEST_F ///< Define to get a unique test name.
#define TEST_MOVEASSIGNMENTOPERATOR_SELFASSIGNMENT TEST_F ///< Define to get a unique test name.

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class WorldPointGeneratorBaseDummy
///
/// \brief Dummy class derived from the WorldPointGeneratorBase class.
///
/// The WorldPointGeneratorBaseDummy class is a dummy class derived from the WorldPointGeneratorBase
/// class. Its main purpose is to get access to non-public members of the WorldPointGeneratorBase
/// class, enabling unit tests to access those members directly. This is being done by making the
/// test classes friends of the WorldPointGeneratorBaseDummy class. Additionally, this dummy class
/// can be used to test the copy and move assignment operators of the WorldPointGeneratorBase class
/// in case of self assignment.
////////////////////////////////////////////////////////////////////////////////////////////////////
class WorldPointGeneratorBaseDummy : public WorldPointGeneratorBase
{
    friend class TestWorldPointGeneratorBase; ///< Friend class to allow for access to non-public members.

public:
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Constructor.
    ///
    /// Initializes the member variables of the class. Afterwards, the set of 3d world points is
    /// being generated by calling the GeneratePointCloud() method. As this is a dummy class only,
    /// all 3d world points will have the same coordinates.
    ///
    /// \param[in] NumberOfWorldPointsToGenerate Number of 3d world points to generate.
    /// \param[in] SeedValue                     Seed value used to initialize the random number engine.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline WorldPointGeneratorBaseDummy(const uint32 NumberOfWorldPointsToGenerate = 1000U,
                                        const uint32 SeedValue                     = 0U) :
        WorldPointGeneratorBase(NumberOfWorldPointsToGenerate, SeedValue)
    {
        GeneratePointCloud();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Copy constructor.
    ///
    /// Copies a WorldPointGeneratorBaseDummy object.
    ///
    /// \param[in] Src Source object to copy.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline WorldPointGeneratorBaseDummy(const WorldPointGeneratorBaseDummy& Src) :
        WorldPointGeneratorBase{Src}
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Move constructor.
    ///
    /// Moves a WorldPointGeneratorBaseDummy object.
    ///
    /// \param[in] Src Source object to move.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline WorldPointGeneratorBaseDummy(WorldPointGeneratorBaseDummy&& Src) noexcept :
        WorldPointGeneratorBase{std::move(Src)}
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Destructor.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ~WorldPointGeneratorBaseDummy() override = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Copy assignment operator.
    ///
    /// Copies a WorldPointGeneratorBaseDummy object by assigning it to a new object. The
    /// if-condition checking for self assignment is not present by design as this enables testing
    /// the copy assignment operator of the base class.
    ///
    /// \param[in] Rhs Source object to copy.
    ///
    /// \return Copied object.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline WorldPointGeneratorBaseDummy& operator=(const WorldPointGeneratorBaseDummy& Rhs) // NOLINT(cert-oop54-cpp)
    {
        WorldPointGeneratorBase::operator=(Rhs);

        return *this;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Move assignment operator.
    ///
    /// Moves a WorldPointGeneratorBaseDummy object by assigning it to a new object. The
    /// if-condition checking for self assignment is not present by design as this enables testing
    /// the move assignment operator of the base class.
    ///
    /// \param[in] Rhs Source object to move.
    ///
    /// \return Moved object.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline WorldPointGeneratorBaseDummy& operator=(WorldPointGeneratorBaseDummy&& Rhs) noexcept
    {
        WorldPointGeneratorBase::operator=(std::move(Rhs));

        return *this;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Generates a single world point.
    ///
    /// Generates a 3d world point. As this is a dummy class only, all 3d world points will have the
    /// same coordinates.
    ///
    /// \param[out] WorldPoint Randomly generated 3d world point.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline void GenerateWorldPoint(ColumnVectorFloat64_3d& WorldPoint) override
    {
        WorldPoint(0) = 0.0;
        WorldPoint(1) = 1.0;
        WorldPoint(2) = 2.0; // NOLINT(cppcoreguidelines-avoid-magic-numbers, readability-magic-numbers)
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class TestWorldPointGeneratorBase
///
/// \brief Test class.
////////////////////////////////////////////////////////////////////////////////////////////////////
class TestWorldPointGeneratorBase : public testing::Test
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Compares two WorldPointGeneratorBaseDummy objects.
    ///
    /// Compares two WorldPointGeneratorBaseDummy objects. All members of the two objects are
    /// compared. In case that any member is not identical, the corresponding unit test is
    /// considered failed. Otherwise, it is considered passed.
    ///
    /// \param[in] WorldPointGenerator1 First WorldPointGeneratorBaseDummy object.
    /// \param[in] WorldPointGenerator2 Second WorldPointGeneratorBaseDummy object.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    inline static void CompareWorldPointGenerators(const WorldPointGeneratorBaseDummy& WorldPointGenerator1,
                                                   const WorldPointGeneratorBaseDummy& WorldPointGenerator2)
    {
        ASSERT_EQ(WorldPointGenerator1.m_RandomNumberEngine, WorldPointGenerator2.m_RandomNumberEngine);
        ASSERT_EQ(WorldPointGenerator1.m_NumberOfWorldPoints, WorldPointGenerator2.m_NumberOfWorldPoints);

        for(uint64 i_WorldPoint{0U}; i_WorldPoint < WorldPointGenerator1.m_NumberOfWorldPoints; i_WorldPoint++)
        {
            ASSERT_EQ(WorldPointGenerator1.m_ListOfWorldPoints[i_WorldPoint], WorldPointGenerator2.m_ListOfWorldPoints[i_WorldPoint]);
        }
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Test for the copy assignment operator (self assignment).
///
/// Tests whether or not two objects of the WorldPointGeneratorBaseDummy class are identical in case
/// that the copy assignment operator is being used.
////////////////////////////////////////////////////////////////////////////////////////////////////
TEST_COPYASSIGNMENTOPERATOR_SELFASSIGNMENT(TestWorldPointGeneratorBase, Test_CopyAssignmentOperator_SelfAssignment)
{
    // prepare test
    const uint32 NumberOfWorldPointsToGenerate{10U};

    WorldPointGeneratorBaseDummy WPG(NumberOfWorldPointsToGenerate);

    // call function under test
    WPG = WPG;

    // run tests
    CompareWorldPointGenerators(WPG, WPG);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Test for the move assignment operator (self assignment).
///
/// Tests whether or not two objects of the WorldPointGeneratorBaseDummy class are identical in case
/// that the move assignment operator is being used.
////////////////////////////////////////////////////////////////////////////////////////////////////
TEST_MOVEASSIGNMENTOPERATOR_SELFASSIGNMENT(TestWorldPointGeneratorBase, Test_MoveAssignmentOperator_SelfAssignment)
{
    // prepare test
    const uint32 NumberOfWorldPointsToGenerate{10U};

    WorldPointGeneratorBaseDummy WPG(NumberOfWorldPointsToGenerate);

    // call function under test
    WPG = std::move(WPG);

    // run tests
    CompareWorldPointGenerators(WPG, WPG); // NOLINT(bugprone-use-after-move)
}
