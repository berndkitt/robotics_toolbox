"""Base class for test report generator."""
import datetime
import getpass
import json
import sys
from abc import ABCMeta
from abc import abstractmethod

import git

from . import TestVerdict


class TestReportGeneratorBase(metaclass=ABCMeta):
    """Base class for test report generator."""

    def __init__(self,
                 test_configuration_json: str) -> None:
        """
        Initialize the test report generator.

        Args:
            test_configuration_json (str): Filename of the configuration including its path.
        """
        # read test configuration JSON
        with open(test_configuration_json, "r") as test_configuration_json_file:
            self._test_configuration = json.load(test_configuration_json_file)

        # get report information
        self.__user = getpass.getuser()
        self.__time = datetime.datetime.today().strftime("%Y-%m-%d %H:%M:%S")

        # get Git commit hash
        repository          = git.Repo(search_parent_directories=True)
        repository_is_dirty = repository.is_dirty()

        self.__git_commit_hash = repository.head.object.hexsha

        if repository_is_dirty:
            self.__git_commit_hash = self.__git_commit_hash + "-dirty"

        # initialize attributes
        self._number_of_failed_tests = 0

    def get_number_of_failed_tests(self) -> int:
        """
        Getter for the number of failed tests.

        Returns:
            int: Number of failed tests.
        """
        return self._number_of_failed_tests

    def print_report_on_console(self,
                                add_details: bool = False) -> None:
        """
        Print test report on the console.

        Args:
            add_details (bool, optional): Flag to add details. Defaults to False.
        """
        # print test report header
        self.__print_test_report_header()

        # print report
        self._print_test_report_core(add_details)

        # print number of failed tests
        print(f"Number of failed tests: {self.get_number_of_failed_tests()}")

    def write_report_to_file(self,
                             filename_report_with_path: str,
                             add_details:               bool = False) -> None:
        """
        Write test report to file.

        Args:
            filename_report_with_path (str): Filename of the test report including its path.
            add_details (bool, optional):    Flag to add details. Defaults to False.
        """
        # redirect stdout to file
        sys.stdout = open(filename_report_with_path, "w")

        # print report
        self.print_report_on_console(add_details)

        # close file
        sys.stdout.close()

        # reset stdout to console
        sys.stdout = sys.__stdout__

    @abstractmethod
    def _print_test_report_core(self,
                                add_details: bool = False) -> None:
        """
        Print core test report on console.

        Args:
            add_details (bool, optional): Flag to add details. Defaults to False.

        Raises:
            NotImplementedError: Raised in case the method of the base class is called.
        """
        raise NotImplementedError("Method must be overridden in child class.")

    def __print_test_report_header(self) -> None:
        """Print the test report header on the console."""
        # print test report header
        print("{:20s} {:8s}".format("Report generated by:", self.__user))
        print("{:20s} {:8s}".format("Report generated on:", self.__time))
        print("{:20s} {:8s}\n".format("Git commit hash:", self.__git_commit_hash))

    @staticmethod
    def _print_results_line(test_name:     str,
                            actual_value:  int,
                            allowed_value: int) -> None:
        """
        Print the results line of a single test on the console.

        Args:
            test_name (str):     Test name.
            actual_value (int):  Actual value.
            allowed_value (int): Maximum allowed value.
        """
        test_verdict = TestVerdict.TestVerdict.calculate_test_verdict(actual_value, allowed_value)

        print("{:25s} {:>20s} {:8d} {:>20s} {:8d} {:>15s}".format(test_name, "Actual Value: ", actual_value, "Maximum Value: ", allowed_value, TestVerdict.TestVerdict.get_test_verdict_as_string(test_verdict)))
